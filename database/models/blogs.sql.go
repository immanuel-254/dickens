// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blogs.sql

package models

import (
	"context"
	"database/sql"
)

const assignBlogToCategory = `-- name: AssignBlogToCategory :exec
INSERT INTO category_blogs (blog_id, category_id, created_at, updated_at) VALUES (?, ?, ?, ?)
`

type AssignBlogToCategoryParams struct {
	BlogID     int64        `json:"blog_id"`
	CategoryID int64        `json:"category_id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

func (q *Queries) AssignBlogToCategory(ctx context.Context, arg AssignBlogToCategoryParams) error {
	_, err := q.db.ExecContext(ctx, assignBlogToCategory,
		arg.BlogID,
		arg.CategoryID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const blogCategoriesList = `-- name: BlogCategoriesList :many
SELECT blog_id, category_id, created_at, updated_at FROM category_blogs
WHERE blog_id = ? ORDER BY blog_id ASC, category_id ASC
`

type BlogCategoriesListRow struct {
	BlogID     int64        `json:"blog_id"`
	CategoryID int64        `json:"category_id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

func (q *Queries) BlogCategoriesList(ctx context.Context, blogID int64) ([]BlogCategoriesListRow, error) {
	rows, err := q.db.QueryContext(ctx, blogCategoriesList, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogCategoriesListRow
	for rows.Next() {
		var i BlogCategoriesListRow
		if err := rows.Scan(
			&i.BlogID,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const blogCreate = `-- name: BlogCreate :one
INSERT INTO blogs (
    user_id, 
    title, 
    body, 
    created_at, 
    updated_at
    ) 
    VALUES (?, ?, ?, ?, ?)
    RETURNING id, user_id, title, body, created_at, updated_at
`

type BlogCreateParams struct {
	UserID    sql.NullInt64 `json:"user_id"`
	Title     string        `json:"title"`
	Body      string        `json:"body"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

func (q *Queries) BlogCreate(ctx context.Context, arg BlogCreateParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, blogCreate,
		arg.UserID,
		arg.Title,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const blogDelete = `-- name: BlogDelete :exec
DELETE FROM blogs WHERE id = ?
`

func (q *Queries) BlogDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, blogDelete, id)
	return err
}

const blogList = `-- name: BlogList :many
SELECT id, user_id, title, body, created_at, updated_at FROM blogs
ORDER BY id ASC
`

func (q *Queries) BlogList(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, blogList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const blogRead = `-- name: BlogRead :one
SELECT id, user_id, title, body, created_at, updated_at FROM blogs
WHERE id = ?
`

func (q *Queries) BlogRead(ctx context.Context, id int64) (Blog, error) {
	row := q.db.QueryRowContext(ctx, blogRead, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const blogUpdate = `-- name: BlogUpdate :one
UPDATE blogs
SET 
    title = ?,
    body = ?,
    updated_at = ?
WHERE id = ?
RETURNING user_id, title, body, created_at, updated_at
`

type BlogUpdateParams struct {
	Title     string       `json:"title"`
	Body      string       `json:"body"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        int64        `json:"id"`
}

type BlogUpdateRow struct {
	UserID    sql.NullInt64 `json:"user_id"`
	Title     string        `json:"title"`
	Body      string        `json:"body"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

func (q *Queries) BlogUpdate(ctx context.Context, arg BlogUpdateParams) (BlogUpdateRow, error) {
	row := q.db.QueryRowContext(ctx, blogUpdate,
		arg.Title,
		arg.Body,
		arg.UpdatedAt,
		arg.ID,
	)
	var i BlogUpdateRow
	err := row.Scan(
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const categoryBlogDelete = `-- name: CategoryBlogDelete :exec
DELETE FROM category_blogs WHERE blog_id = ? and category_id = ?
`

type CategoryBlogDeleteParams struct {
	BlogID     int64 `json:"blog_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) CategoryBlogDelete(ctx context.Context, arg CategoryBlogDeleteParams) error {
	_, err := q.db.ExecContext(ctx, categoryBlogDelete, arg.BlogID, arg.CategoryID)
	return err
}

const categoryBlogList = `-- name: CategoryBlogList :many
SELECT blog_id, category_id, created_at, updated_at FROM category_blogs
ORDER BY blog_id ASC, category_id ASC
`

type CategoryBlogListRow struct {
	BlogID     int64        `json:"blog_id"`
	CategoryID int64        `json:"category_id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

func (q *Queries) CategoryBlogList(ctx context.Context) ([]CategoryBlogListRow, error) {
	rows, err := q.db.QueryContext(ctx, categoryBlogList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CategoryBlogListRow
	for rows.Next() {
		var i CategoryBlogListRow
		if err := rows.Scan(
			&i.BlogID,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
