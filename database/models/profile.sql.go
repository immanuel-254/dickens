// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: profile.sql

package models

import (
	"context"
	"database/sql"
)

const profileCreate = `-- name: ProfileCreate :one
INSERT INTO profiles (
    user_id, 
    username,
    image,
    bio, 
    created_at, 
    updated_at
    ) 
    VALUES (?, ?, ?, ?, ?, ?)
    RETURNING id, user_id, username, image, bio, created_at, updated_at
`

type ProfileCreateParams struct {
	UserID    sql.NullInt64  `json:"user_id"`
	Username  string         `json:"username"`
	Image     sql.NullString `json:"image"`
	Bio       sql.NullString `json:"bio"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

func (q *Queries) ProfileCreate(ctx context.Context, arg ProfileCreateParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, profileCreate,
		arg.UserID,
		arg.Username,
		arg.Image,
		arg.Bio,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Image,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const profileDelete = `-- name: ProfileDelete :exec
DELETE FROM profiles WHERE id = ?
`

func (q *Queries) ProfileDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, profileDelete, id)
	return err
}

const profileList = `-- name: ProfileList :many
SELECT id, user_id, username, image, bio, created_at, updated_at FROM profiles
ORDER BY id ASC
`

func (q *Queries) ProfileList(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, profileList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Image,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const profileRead = `-- name: ProfileRead :one
SELECT id, user_id, username, image, bio, created_at, updated_at FROM profiles
WHERE id = ?
`

func (q *Queries) ProfileRead(ctx context.Context, id int64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, profileRead, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Image,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const profileUpdate = `-- name: ProfileUpdate :one
UPDATE profiles
SET 
    username = ?,
    image = ?,
    bio = ?,
    created_at = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, user_id, username, image, bio, created_at, updated_at
`

type ProfileUpdateParams struct {
	Username  string         `json:"username"`
	Image     sql.NullString `json:"image"`
	Bio       sql.NullString `json:"bio"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) ProfileUpdate(ctx context.Context, arg ProfileUpdateParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, profileUpdate,
		arg.Username,
		arg.Image,
		arg.Bio,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Image,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
