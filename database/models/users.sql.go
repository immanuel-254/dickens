// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package models

import (
	"context"
	"database/sql"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO users (
    surname, 
    first_name, 
    last_name, 
    password, 
    email, 
    created_at, 
    updated_at
    ) 
    VALUES (?, ?, ?, ?, ?, ?, ?)
    RETURNING id, surname, first_name, last_name, email, created_at, updated_at
`

type UserCreateParams struct {
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Password  string       `json:"password"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

type UserCreateRow struct {
	ID        int64        `json:"id"`
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (UserCreateRow, error) {
	row := q.db.QueryRowContext(ctx, userCreate,
		arg.Surname,
		arg.FirstName,
		arg.LastName,
		arg.Password,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserCreateRow
	err := row.Scan(
		&i.ID,
		&i.Surname,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userDelete = `-- name: UserDelete :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) UserDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, userDelete, id)
	return err
}

const userList = `-- name: UserList :many
SELECT id, surname, first_name, last_name, email, created_at, updated_at FROM users
ORDER BY id ASC
`

type UserListRow struct {
	ID        int64        `json:"id"`
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UserList(ctx context.Context) ([]UserListRow, error) {
	rows, err := q.db.QueryContext(ctx, userList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserListRow
	for rows.Next() {
		var i UserListRow
		if err := rows.Scan(
			&i.ID,
			&i.Surname,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userLoginRead = `-- name: UserLoginRead :one
SELECT email, password FROM users
WHERE email = ?
`

type UserLoginReadRow struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UserLoginRead(ctx context.Context, email string) (UserLoginReadRow, error) {
	row := q.db.QueryRowContext(ctx, userLoginRead, email)
	var i UserLoginReadRow
	err := row.Scan(&i.Email, &i.Password)
	return i, err
}

const userRead = `-- name: UserRead :one
SELECT id, surname, first_name, last_name, email, created_at, updated_at FROM users
WHERE id = ?
`

type UserReadRow struct {
	ID        int64        `json:"id"`
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UserRead(ctx context.Context, id int64) (UserReadRow, error) {
	row := q.db.QueryRowContext(ctx, userRead, id)
	var i UserReadRow
	err := row.Scan(
		&i.ID,
		&i.Surname,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userUpdate = `-- name: UserUpdate :one
UPDATE users
SET surname = ?, first_name = ?, last_name = ?, updated_at = ?
WHERE id = ?
RETURNING id, surname, first_name, last_name, email, created_at, updated_at
`

type UserUpdateParams struct {
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        int64        `json:"id"`
}

type UserUpdateRow struct {
	ID        int64        `json:"id"`
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) (UserUpdateRow, error) {
	row := q.db.QueryRowContext(ctx, userUpdate,
		arg.Surname,
		arg.FirstName,
		arg.LastName,
		arg.UpdatedAt,
		arg.ID,
	)
	var i UserUpdateRow
	err := row.Scan(
		&i.ID,
		&i.Surname,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userUpdateEmail = `-- name: UserUpdateEmail :one
UPDATE users SET email = ?, updated_at = ? WHERE id = ? 
RETURNING id, surname, first_name, last_name, email, created_at, updated_at
`

type UserUpdateEmailParams struct {
	Email     string       `json:"email"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        int64        `json:"id"`
}

type UserUpdateEmailRow struct {
	ID        int64        `json:"id"`
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UserUpdateEmail(ctx context.Context, arg UserUpdateEmailParams) (UserUpdateEmailRow, error) {
	row := q.db.QueryRowContext(ctx, userUpdateEmail, arg.Email, arg.UpdatedAt, arg.ID)
	var i UserUpdateEmailRow
	err := row.Scan(
		&i.ID,
		&i.Surname,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userUpdatePassword = `-- name: UserUpdatePassword :one
UPDATE users SET password = ?, updated_at = ? WHERE id = ? 
RETURNING id, surname, first_name, last_name, email, created_at, updated_at
`

type UserUpdatePasswordParams struct {
	Password  string       `json:"password"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        int64        `json:"id"`
}

type UserUpdatePasswordRow struct {
	ID        int64        `json:"id"`
	Surname   string       `json:"surname"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UserUpdatePassword(ctx context.Context, arg UserUpdatePasswordParams) (UserUpdatePasswordRow, error) {
	row := q.db.QueryRowContext(ctx, userUpdatePassword, arg.Password, arg.UpdatedAt, arg.ID)
	var i UserUpdatePasswordRow
	err := row.Scan(
		&i.ID,
		&i.Surname,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
