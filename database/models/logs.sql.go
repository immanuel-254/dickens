// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: logs.sql

package models

import (
	"context"
	"database/sql"
)

const logCreate = `-- name: LogCreate :exec
INSERT INTO logs (
    db_table, 
    action,
    object_id, 
    created_at, 
    updated_at
    ) 
    VALUES (?, ?, ?, ?, ?)
`

type LogCreateParams struct {
	DbTable   string       `json:"db_table"`
	Action    string       `json:"action"`
	ObjectID  int64        `json:"object_id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) LogCreate(ctx context.Context, arg LogCreateParams) error {
	_, err := q.db.ExecContext(ctx, logCreate,
		arg.DbTable,
		arg.Action,
		arg.ObjectID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const logList = `-- name: LogList :many
SELECT id, db_table, action, object_id, created_at, updated_at FROM logs
ORDER BY id ASC
`

func (q *Queries) LogList(ctx context.Context) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, logList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.DbTable,
			&i.Action,
			&i.ObjectID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
