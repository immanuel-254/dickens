// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package models

import (
	"context"
	"database/sql"
)

const categoryCreate = `-- name: CategoryCreate :one
INSERT INTO categories (
    user_id, 
    name, 
    created_at, 
    updated_at
    ) 
    VALUES (?, ?, ?, ?)
    RETURNING id, user_id, name, created_at, updated_at
`

type CategoryCreateParams struct {
	UserID    sql.NullInt64 `json:"user_id"`
	Name      string        `json:"name"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

func (q *Queries) CategoryCreate(ctx context.Context, arg CategoryCreateParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, categoryCreate,
		arg.UserID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const categoryDelete = `-- name: CategoryDelete :exec
DELETE FROM categories WHERE id = ?
`

func (q *Queries) CategoryDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, categoryDelete, id)
	return err
}

const categoryList = `-- name: CategoryList :many
SELECT id, user_id, name, created_at, updated_at FROM categories
ORDER BY id ASC
`

func (q *Queries) CategoryList(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, categoryList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const categoryRead = `-- name: CategoryRead :one
SELECT id, user_id, name, created_at, updated_at FROM categories
WHERE id = ?
`

func (q *Queries) CategoryRead(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, categoryRead, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const categoryUpdate = `-- name: CategoryUpdate :one
UPDATE categories
SET 
    name = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, user_id, name, created_at, updated_at
`

type CategoryUpdateParams struct {
	Name      string       `json:"name"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        int64        `json:"id"`
}

func (q *Queries) CategoryUpdate(ctx context.Context, arg CategoryUpdateParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, categoryUpdate, arg.Name, arg.UpdatedAt, arg.ID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
